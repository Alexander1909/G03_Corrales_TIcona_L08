package avltree;

public class AVLTree<E extends Comparable<E>> extends BSTree<E> {
    private boolean height;

    class NodeAVL extends Node {
        protected int bf; 

        public NodeAVL(E data) {
            super(data);     
            this.bf = 0;     
        }

        @Override
        public String toString() {
            return super.toString() + " [bf=" + bf + "]";
        }
    }

    // Método público de inserción
    public void insert(E x) throws ItemDuplicated {
        this.height = false;
        this.root = insert(x, (NodeAVL) this.root);
    }

    // Método protegido con lógica AVL
    protected NodeAVL insert(E x, NodeAVL node) throws ItemDuplicated {
        NodeAVL fat = node;

        if (node == null) {
            this.height = true;
            fat = new NodeAVL(x);
        } else {
            int resC = x.compareTo(node.data);
            if (resC == 0)
                throw new ItemDuplicated(x + " ya se encuentra en el árbol...");

            if (resC > 0) { // insertar a la derecha
                fat.right = insert(x, (NodeAVL) node.right);

                if (this.height) {
                    switch (fat.bf) {
                        case -1:
                            fat.bf = 0;
                            this.height = false;
                            break;
                        case 0:
                            fat.bf = 1;
                            this.height = true;
                            break;
                        case 1:
                            fat = balanceToLeft(fat);
                            this.height = false;
                            break;
                    }
                }
            } else { // insertar a la izquierda
                fat.left = insert(x, (NodeAVL) node.left);

                if (this.height) {
                    switch (fat.bf) {
                        case 1:
                            fat.bf = 0;
                            this.height = false;
                            break;
                        case 0:
                            fat.bf = -1;
                            this.height = true;
                            break;
                        case -1:
                            fat = balanceToRight(fat);
                            this.height = false;
                            break;
                    }
                }
            }
        }

        return fat;
    }

 }
public class TestAVL {
    public static void main(String[] args) {
        try {
            AVLTree<Integer> avl = new AVLTree<>();

            // Caso 1: Rotación simple a la derecha (RSR)
            avl.insert(30);
            avl.insert(20);
            avl.insert(10); // provoca RSR

            // Caso 2: Rotación simple a la izquierda (RSL)
            avl.insert(40);
            avl.insert(50); // provoca RSL

            // Caso 3: Rotación doble derecha-izquierda (RDL)
            avl.insert(45); // provoca RDL

            // Caso 4: Rotación doble izquierda-derecha (RDR)
            avl.insert(5);
            avl.insert(7); // provoca RDR

            // Caso 5: insertar un duplicado
            // avl.insert(30); // debería lanzar ItemDuplicated

            // Otros casos para probar más inserciones y ver más rebalanceos
            avl.insert(3);
            avl.insert(6);
            avl.insert(8);

            System.out.println("AVL construido correctamente.");
        } catch (Exception e) {
            e.printStackTrace();
        }

        AVLTree<Integer> avl = new AVLTree<>();
        avl.insert(30);
        avl.insert(20);
        avl.insert(40);
        avl.delete(40);
        System.out.println("Altura después de eliminar 40: " + avl.height());



        AVLTree<Integer> avl = new AVLTree<>();
        int[] datos = {50, 30, 70, 20, 40, 60, 80, 10, 25, 65};

        for (int d : datos) {
            avl.insert(d);
        }

        System.out.println("Recorrido BFS del árbol AVL:");
        avl.printBFS(); 
    }


   
        AVLTree<Integer> arbol = new AVLTree<>();
        int[] datos = {50, 30, 70, 20, 40, 60, 80, 10, 25, 65};
        for (int dato : datos) {
            arbol.insert(dato);
        }

        System.out.println("Recorrido BFS:");
        arbol.recorridoBFS();
    }


        
